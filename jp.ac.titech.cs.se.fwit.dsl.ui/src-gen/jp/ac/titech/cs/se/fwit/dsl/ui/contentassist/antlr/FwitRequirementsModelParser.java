/*
* generated by Xtext
*/
package jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jp.ac.titech.cs.se.fwit.dsl.services.FwitRequirementsModelGrammarAccess;

public class FwitRequirementsModelParser extends AbstractContentAssistParser {
	
	@Inject
	private FwitRequirementsModelGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal.InternalFwitRequirementsModelParser createParser() {
		jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal.InternalFwitRequirementsModelParser result = new jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal.InternalFwitRequirementsModelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSystemElementAccess().getAlternatives(), "rule__SystemElement__Alternatives");
					put(grammarAccess.getComparatorAccess().getAlternatives(), "rule__Comparator__Alternatives");
					put(grammarAccess.getAddOperatorAccess().getAlternatives(), "rule__AddOperator__Alternatives");
					put(grammarAccess.getMultiOperatorAccess().getAlternatives(), "rule__MultiOperator__Alternatives");
					put(grammarAccess.getBasicExpressionAccess().getAlternatives(), "rule__BasicExpression__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives_1_0(), "rule__Statement__Alternatives_1_0");
					put(grammarAccess.getElseBlockAccess().getAlternatives(), "rule__ElseBlock__Alternatives");
					put(grammarAccess.getTaskStatementAccess().getAlternatives(), "rule__TaskStatement__Alternatives");
					put(grammarAccess.getFwitRequirementModelAccess().getGroup(), "rule__FwitRequirementModel__Group__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getSystemDeclarationAccess().getGroup(), "rule__SystemDeclaration__Group__0");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getFieldDeclarationAccess().getGroup(), "rule__FieldDeclaration__Group__0");
					put(grammarAccess.getFieldDeclarationAccess().getGroup_2(), "rule__FieldDeclaration__Group_2__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getComparisionAccess().getGroup(), "rule__Comparision__Group__0");
					put(grammarAccess.getComparisionAccess().getGroup_1(), "rule__Comparision__Group_1__0");
					put(grammarAccess.getValueExpressionAccess().getGroup(), "rule__ValueExpression__Group__0");
					put(grammarAccess.getValueExpressionAccess().getGroup_1(), "rule__ValueExpression__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getPrefixOperatorExpressionAccess().getGroup(), "rule__PrefixOperatorExpression__Group__0");
					put(grammarAccess.getMethodInvocationExpressionAccess().getGroup(), "rule__MethodInvocationExpression__Group__0");
					put(grammarAccess.getMethodInvocationExpressionAccess().getGroup_0(), "rule__MethodInvocationExpression__Group_0__0");
					put(grammarAccess.getMethodInvocationAccess().getGroup(), "rule__MethodInvocation__Group__0");
					put(grammarAccess.getMethodInvocationAccess().getGroup_2(), "rule__MethodInvocation__Group_2__0");
					put(grammarAccess.getMethodInvocationAccess().getGroup_2_1(), "rule__MethodInvocation__Group_2_1__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getLocalVariableDeclarationAccess().getGroup(), "rule__LocalVariableDeclaration__Group__0");
					put(grammarAccess.getLocalVariableDeclarationAccess().getGroup_2(), "rule__LocalVariableDeclaration__Group_2__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_3(), "rule__IfStatement__Group_3__0");
					put(grammarAccess.getAssignmentStatementAccess().getGroup(), "rule__AssignmentStatement__Group__0");
					put(grammarAccess.getParExpressionAccess().getGroup(), "rule__ParExpression__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getFwitRequirementModelAccess().getSystemAssignment_0(), "rule__FwitRequirementModel__SystemAssignment_0");
					put(grammarAccess.getFwitRequirementModelAccess().getElementsAssignment_1(), "rule__FwitRequirementModel__ElementsAssignment_1");
					put(grammarAccess.getIncludeAccess().getFileAssignment_1(), "rule__Include__FileAssignment_1");
					put(grammarAccess.getTypeAccess().getNameAssignment_1(), "rule__Type__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getClassNameAssignment_3(), "rule__Type__ClassNameAssignment_3");
					put(grammarAccess.getSystemDeclarationAccess().getNameAssignment_1(), "rule__SystemDeclaration__NameAssignment_1");
					put(grammarAccess.getSystemDeclarationAccess().getFrameworkAssignment_3(), "rule__SystemDeclaration__FrameworkAssignment_3");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getFieldsAssignment_3(), "rule__Module__FieldsAssignment_3");
					put(grammarAccess.getModuleAccess().getFunctionsAssignment_4(), "rule__Module__FunctionsAssignment_4");
					put(grammarAccess.getFieldDeclarationAccess().getTypeAssignment_0(), "rule__FieldDeclaration__TypeAssignment_0");
					put(grammarAccess.getFieldDeclarationAccess().getVariablesAssignment_1(), "rule__FieldDeclaration__VariablesAssignment_1");
					put(grammarAccess.getFieldDeclarationAccess().getVariablesAssignment_2_1(), "rule__FieldDeclaration__VariablesAssignment_2_1");
					put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1(), "rule__FunctionDeclaration__NameAssignment_1");
					put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_2(), "rule__FunctionDeclaration__BodyAssignment_2");
					put(grammarAccess.getBlockAccess().getStatementsAssignment_1(), "rule__Block__StatementsAssignment_1");
					put(grammarAccess.getExpressionAccess().getLeftOperandAssignment_0(), "rule__Expression__LeftOperandAssignment_0");
					put(grammarAccess.getExpressionAccess().getOperatorAssignment_1_0(), "rule__Expression__OperatorAssignment_1_0");
					put(grammarAccess.getExpressionAccess().getRightOperandAssignment_1_1(), "rule__Expression__RightOperandAssignment_1_1");
					put(grammarAccess.getConjunctionAccess().getLeftOperandAssignment_0(), "rule__Conjunction__LeftOperandAssignment_0");
					put(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_0(), "rule__Conjunction__OperatorAssignment_1_0");
					put(grammarAccess.getConjunctionAccess().getRightOperandAssignment_1_1(), "rule__Conjunction__RightOperandAssignment_1_1");
					put(grammarAccess.getComparisionAccess().getLeftOperandAssignment_0(), "rule__Comparision__LeftOperandAssignment_0");
					put(grammarAccess.getComparisionAccess().getOperatorAssignment_1_0(), "rule__Comparision__OperatorAssignment_1_0");
					put(grammarAccess.getComparisionAccess().getRightOperandAssignment_1_1(), "rule__Comparision__RightOperandAssignment_1_1");
					put(grammarAccess.getValueExpressionAccess().getLeftOperandAssignment_0(), "rule__ValueExpression__LeftOperandAssignment_0");
					put(grammarAccess.getValueExpressionAccess().getOperatorAssignment_1_0(), "rule__ValueExpression__OperatorAssignment_1_0");
					put(grammarAccess.getValueExpressionAccess().getRightOperandAssignment_1_1(), "rule__ValueExpression__RightOperandAssignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getLeftOperandAssignment_0(), "rule__Multiplication__LeftOperandAssignment_0");
					put(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_0(), "rule__Multiplication__OperatorAssignment_1_0");
					put(grammarAccess.getMultiplicationAccess().getRightOperandAssignment_1_1(), "rule__Multiplication__RightOperandAssignment_1_1");
					put(grammarAccess.getSimpleLiteralAccess().getValueAssignment(), "rule__SimpleLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getIntegerLiteralAccess().getValueAssignment(), "rule__IntegerLiteral__ValueAssignment");
					put(grammarAccess.getQualifiedExpressionAccess().getValueAssignment(), "rule__QualifiedExpression__ValueAssignment");
					put(grammarAccess.getNullLiteralAccess().getValueAssignment(), "rule__NullLiteral__ValueAssignment");
					put(grammarAccess.getPrefixOperatorExpressionAccess().getOperatorAssignment_0(), "rule__PrefixOperatorExpression__OperatorAssignment_0");
					put(grammarAccess.getPrefixOperatorExpressionAccess().getOperandAssignment_1(), "rule__PrefixOperatorExpression__OperandAssignment_1");
					put(grammarAccess.getMethodInvocationExpressionAccess().getReceiverAssignment_0_0(), "rule__MethodInvocationExpression__ReceiverAssignment_0_0");
					put(grammarAccess.getMethodInvocationExpressionAccess().getMethodAssignment_1(), "rule__MethodInvocationExpression__MethodAssignment_1");
					put(grammarAccess.getMethodInvocationAccess().getNameAssignment_0(), "rule__MethodInvocation__NameAssignment_0");
					put(grammarAccess.getMethodInvocationAccess().getArgumentsAssignment_2_0(), "rule__MethodInvocation__ArgumentsAssignment_2_0");
					put(grammarAccess.getMethodInvocationAccess().getArgumentsAssignment_2_1_1(), "rule__MethodInvocation__ArgumentsAssignment_2_1_1");
					put(grammarAccess.getLocalVariableDeclarationAccess().getTypeAssignment_0(), "rule__LocalVariableDeclaration__TypeAssignment_0");
					put(grammarAccess.getLocalVariableDeclarationAccess().getVariablesAssignment_1(), "rule__LocalVariableDeclaration__VariablesAssignment_1");
					put(grammarAccess.getLocalVariableDeclarationAccess().getVariablesAssignment_2_1(), "rule__LocalVariableDeclaration__VariablesAssignment_2_1");
					put(grammarAccess.getIfStatementAccess().getConditionAssignment_1(), "rule__IfStatement__ConditionAssignment_1");
					put(grammarAccess.getIfStatementAccess().getThenBlokAssignment_2(), "rule__IfStatement__ThenBlokAssignment_2");
					put(grammarAccess.getIfStatementAccess().getElseBlockAssignment_3_1(), "rule__IfStatement__ElseBlockAssignment_3_1");
					put(grammarAccess.getReturnStatementAccess().getValueAssignment(), "rule__ReturnStatement__ValueAssignment");
					put(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0(), "rule__AssignmentStatement__VariableAssignment_0");
					put(grammarAccess.getAssignmentStatementAccess().getOperatorAssignment_1(), "rule__AssignmentStatement__OperatorAssignment_1");
					put(grammarAccess.getAssignmentStatementAccess().getValueAssignment_2(), "rule__AssignmentStatement__ValueAssignment_2");
					put(grammarAccess.getParExpressionAccess().getExpressionAssignment_1(), "rule__ParExpression__ExpressionAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getNameAssignment(), "rule__VariableDeclaration__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal.InternalFwitRequirementsModelParser typedParser = (jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal.InternalFwitRequirementsModelParser) parser;
			typedParser.entryRuleFwitRequirementModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FwitRequirementsModelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FwitRequirementsModelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
