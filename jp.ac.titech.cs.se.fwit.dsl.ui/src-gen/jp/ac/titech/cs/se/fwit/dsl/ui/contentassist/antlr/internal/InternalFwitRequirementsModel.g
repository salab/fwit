/*
* generated by Xtext
*/
grammar InternalFwitRequirementsModel;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package jp.ac.titech.cs.se.fwit.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import jp.ac.titech.cs.se.fwit.dsl.services.FwitRequirementsModelGrammarAccess;

}

@parser::members {
 
 	private FwitRequirementsModelGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(FwitRequirementsModelGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleFwitRequirementModel
entryRuleFwitRequirementModel 
:
{ before(grammarAccess.getFwitRequirementModelRule()); }
	 ruleFwitRequirementModel
{ after(grammarAccess.getFwitRequirementModelRule()); } 
	 EOF 
;

// Rule FwitRequirementModel
ruleFwitRequirementModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFwitRequirementModelAccess().getGroup()); }
(rule__FwitRequirementModel__Group__0)
{ after(grammarAccess.getFwitRequirementModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSystemElement
entryRuleSystemElement 
:
{ before(grammarAccess.getSystemElementRule()); }
	 ruleSystemElement
{ after(grammarAccess.getSystemElementRule()); } 
	 EOF 
;

// Rule SystemElement
ruleSystemElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemElementAccess().getAlternatives()); }
(rule__SystemElement__Alternatives)
{ after(grammarAccess.getSystemElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInclude
entryRuleInclude 
:
{ before(grammarAccess.getIncludeRule()); }
	 ruleInclude
{ after(grammarAccess.getIncludeRule()); } 
	 EOF 
;

// Rule Include
ruleInclude
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeAccess().getGroup()); }
(rule__Include__Group__0)
{ after(grammarAccess.getIncludeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSystemDeclaration
entryRuleSystemDeclaration 
:
{ before(grammarAccess.getSystemDeclarationRule()); }
	 ruleSystemDeclaration
{ after(grammarAccess.getSystemDeclarationRule()); } 
	 EOF 
;

// Rule SystemDeclaration
ruleSystemDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSystemDeclarationAccess().getGroup()); }
(rule__SystemDeclaration__Group__0)
{ after(grammarAccess.getSystemDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration 
:
{ before(grammarAccess.getFieldDeclarationRule()); }
	 ruleFieldDeclaration
{ after(grammarAccess.getFieldDeclarationRule()); } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldDeclarationAccess().getGroup()); }
(rule__FieldDeclaration__Group__0)
{ after(grammarAccess.getFieldDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparator
entryRuleComparator 
:
{ before(grammarAccess.getComparatorRule()); }
	 ruleComparator
{ after(grammarAccess.getComparatorRule()); } 
	 EOF 
;

// Rule Comparator
ruleComparator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparatorAccess().getAlternatives()); }
(rule__Comparator__Alternatives)
{ after(grammarAccess.getComparatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddOperator
entryRuleAddOperator 
:
{ before(grammarAccess.getAddOperatorRule()); }
	 ruleAddOperator
{ after(grammarAccess.getAddOperatorRule()); } 
	 EOF 
;

// Rule AddOperator
ruleAddOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddOperatorAccess().getAlternatives()); }
(rule__AddOperator__Alternatives)
{ after(grammarAccess.getAddOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiOperator
entryRuleMultiOperator 
:
{ before(grammarAccess.getMultiOperatorRule()); }
	 ruleMultiOperator
{ after(grammarAccess.getMultiOperatorRule()); } 
	 EOF 
;

// Rule MultiOperator
ruleMultiOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiOperatorAccess().getAlternatives()); }
(rule__MultiOperator__Alternatives)
{ after(grammarAccess.getMultiOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConjunction
entryRuleConjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleConjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule Conjunction
ruleConjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparision
entryRuleComparision 
:
{ before(grammarAccess.getComparisionRule()); }
	 ruleComparision
{ after(grammarAccess.getComparisionRule()); } 
	 EOF 
;

// Rule Comparision
ruleComparision
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisionAccess().getGroup()); }
(rule__Comparision__Group__0)
{ after(grammarAccess.getComparisionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValueExpression
entryRuleValueExpression 
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueExpressionAccess().getGroup()); }
(rule__ValueExpression__Group__0)
{ after(grammarAccess.getValueExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplication
entryRuleMultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicExpression
entryRuleBasicExpression 
:
{ before(grammarAccess.getBasicExpressionRule()); }
	 ruleBasicExpression
{ after(grammarAccess.getBasicExpressionRule()); } 
	 EOF 
;

// Rule BasicExpression
ruleBasicExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicExpressionAccess().getAlternatives()); }
(rule__BasicExpression__Alternatives)
{ after(grammarAccess.getBasicExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleName
entryRuleName 
:
{ before(grammarAccess.getNameRule()); }
	 ruleName
{ after(grammarAccess.getNameRule()); } 
	 EOF 
;

// Rule Name
ruleName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNameAccess().getLiteralParserRuleCall()); }
	ruleLiteral
{ after(grammarAccess.getNameAccess().getLiteralParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleLiteral
entryRuleSimpleLiteral 
:
{ before(grammarAccess.getSimpleLiteralRule()); }
	 ruleSimpleLiteral
{ after(grammarAccess.getSimpleLiteralRule()); } 
	 EOF 
;

// Rule SimpleLiteral
ruleSimpleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleLiteralAccess().getValueAssignment()); }
(rule__SimpleLiteral__ValueAssignment)
{ after(grammarAccess.getSimpleLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral 
:
{ before(grammarAccess.getIntegerLiteralRule()); }
	 ruleIntegerLiteral
{ after(grammarAccess.getIntegerLiteralRule()); } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
(rule__IntegerLiteral__ValueAssignment)
{ after(grammarAccess.getIntegerLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedExpression
entryRuleQualifiedExpression 
:
{ before(grammarAccess.getQualifiedExpressionRule()); }
	 ruleQualifiedExpression
{ after(grammarAccess.getQualifiedExpressionRule()); } 
	 EOF 
;

// Rule QualifiedExpression
ruleQualifiedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedExpressionAccess().getValueAssignment()); }
(rule__QualifiedExpression__ValueAssignment)
{ after(grammarAccess.getQualifiedExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullLiteral
entryRuleNullLiteral 
:
{ before(grammarAccess.getNullLiteralRule()); }
	 ruleNullLiteral
{ after(grammarAccess.getNullLiteralRule()); } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
(rule__NullLiteral__ValueAssignment)
{ after(grammarAccess.getNullLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullExpression
entryRuleNullExpression 
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullExpressionAccess().getNullKeyword()); }

	'null' 

{ after(grammarAccess.getNullExpressionAccess().getNullKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefixOperatorExpression
entryRulePrefixOperatorExpression 
:
{ before(grammarAccess.getPrefixOperatorExpressionRule()); }
	 rulePrefixOperatorExpression
{ after(grammarAccess.getPrefixOperatorExpressionRule()); } 
	 EOF 
;

// Rule PrefixOperatorExpression
rulePrefixOperatorExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixOperatorExpressionAccess().getGroup()); }
(rule__PrefixOperatorExpression__Group__0)
{ after(grammarAccess.getPrefixOperatorExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodInvocationExpression
entryRuleMethodInvocationExpression 
:
{ before(grammarAccess.getMethodInvocationExpressionRule()); }
	 ruleMethodInvocationExpression
{ after(grammarAccess.getMethodInvocationExpressionRule()); } 
	 EOF 
;

// Rule MethodInvocationExpression
ruleMethodInvocationExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getGroup()); }
(rule__MethodInvocationExpression__Group__0)
{ after(grammarAccess.getMethodInvocationExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation 
:
{ before(grammarAccess.getMethodInvocationRule()); }
	 ruleMethodInvocation
{ after(grammarAccess.getMethodInvocationRule()); } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodInvocationAccess().getGroup()); }
(rule__MethodInvocation__Group__0)
{ after(grammarAccess.getMethodInvocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration 
:
{ before(grammarAccess.getLocalVariableDeclarationRule()); }
	 ruleLocalVariableDeclaration
{ after(grammarAccess.getLocalVariableDeclarationRule()); } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
(rule__LocalVariableDeclaration__Group__0)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfStatement
entryRuleIfStatement 
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfStatementAccess().getGroup()); }
(rule__IfStatement__Group__0)
{ after(grammarAccess.getIfStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElseBlock
entryRuleElseBlock 
:
{ before(grammarAccess.getElseBlockRule()); }
	 ruleElseBlock
{ after(grammarAccess.getElseBlockRule()); } 
	 EOF 
;

// Rule ElseBlock
ruleElseBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElseBlockAccess().getAlternatives()); }
(rule__ElseBlock__Alternatives)
{ after(grammarAccess.getElseBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getValueAssignment()); }
(rule__ReturnStatement__ValueAssignment)
{ after(grammarAccess.getReturnStatementAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTaskStatement
entryRuleTaskStatement 
:
{ before(grammarAccess.getTaskStatementRule()); }
	 ruleTaskStatement
{ after(grammarAccess.getTaskStatementRule()); } 
	 EOF 
;

// Rule TaskStatement
ruleTaskStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTaskStatementAccess().getAlternatives()); }
(rule__TaskStatement__Alternatives)
{ after(grammarAccess.getTaskStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement 
:
{ before(grammarAccess.getAssignmentStatementRule()); }
	 ruleAssignmentStatement
{ after(grammarAccess.getAssignmentStatementRule()); } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentStatementAccess().getGroup()); }
(rule__AssignmentStatement__Group__0)
{ after(grammarAccess.getAssignmentStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParExpression
entryRuleParExpression 
:
{ before(grammarAccess.getParExpressionRule()); }
	 ruleParExpression
{ after(grammarAccess.getParExpressionRule()); } 
	 EOF 
;

// Rule ParExpression
ruleParExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParExpressionAccess().getGroup()); }
(rule__ParExpression__Group__0)
{ after(grammarAccess.getParExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration 
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment()); }
(rule__VariableDeclaration__NameAssignment)
{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefixOperator
entryRulePrefixOperator 
:
{ before(grammarAccess.getPrefixOperatorRule()); }
	 rulePrefixOperator
{ after(grammarAccess.getPrefixOperatorRule()); } 
	 EOF 
;

// Rule PrefixOperator
rulePrefixOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixOperatorAccess().getExclamationMarkKeyword()); }

	'!' 

{ after(grammarAccess.getPrefixOperatorAccess().getExclamationMarkKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator 
:
{ before(grammarAccess.getAssignmentOperatorRule()); }
	 ruleAssignmentOperator
{ after(grammarAccess.getAssignmentOperatorRule()); } 
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword()); }

	'=' 

{ after(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__SystemElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemElementAccess().getIncludeParserRuleCall_0()); }
	ruleInclude
{ after(grammarAccess.getSystemElementAccess().getIncludeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSystemElementAccess().getTypeParserRuleCall_1()); }
	ruleType
{ after(grammarAccess.getSystemElementAccess().getTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSystemElementAccess().getModuleParserRuleCall_2()); }
	ruleModule
{ after(grammarAccess.getSystemElementAccess().getModuleParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getComparatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getComparatorAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLessThanSignEqualsSignKeyword_2()); }

	'<=' 

{ after(grammarAccess.getComparatorAccess().getLessThanSignEqualsSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }

	'>=' 

{ after(grammarAccess.getComparatorAccess().getGreaterThanSignEqualsSignKeyword_3()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getGreaterThanSignKeyword_4()); }

	'>' 

{ after(grammarAccess.getComparatorAccess().getGreaterThanSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getComparatorAccess().getLessThanSignKeyword_5()); }

	'<' 

{ after(grammarAccess.getComparatorAccess().getLessThanSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOperatorAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getAddOperatorAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAddOperatorAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAddOperatorAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiOperatorAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMultiOperatorAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMultiOperatorAccess().getPercentSignKeyword_1()); }

	'%' 

{ after(grammarAccess.getMultiOperatorAccess().getPercentSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getMultiOperatorAccess().getSolidusKeyword_2()); }

	'/' 

{ after(grammarAccess.getMultiOperatorAccess().getSolidusKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicExpressionAccess().getParExpressionParserRuleCall_0()); }
	ruleParExpression
{ after(grammarAccess.getBasicExpressionAccess().getParExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBasicExpressionAccess().getPrefixOperatorExpressionParserRuleCall_1()); }
	rulePrefixOperatorExpression
{ after(grammarAccess.getBasicExpressionAccess().getPrefixOperatorExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBasicExpressionAccess().getMethodInvocationExpressionParserRuleCall_2()); }
	ruleMethodInvocationExpression
{ after(grammarAccess.getBasicExpressionAccess().getMethodInvocationExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBasicExpressionAccess().getQualifiedExpressionParserRuleCall_3()); }
	ruleQualifiedExpression
{ after(grammarAccess.getBasicExpressionAccess().getQualifiedExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBasicExpressionAccess().getNameParserRuleCall_4()); }
	ruleName
{ after(grammarAccess.getBasicExpressionAccess().getNameParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getSimpleLiteralParserRuleCall_0()); }
	ruleSimpleLiteral
{ after(grammarAccess.getLiteralAccess().getSimpleLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_2()); }
	ruleIntegerLiteral
{ after(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); }
	ruleNullLiteral
{ after(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); }
	ruleIfStatement
{ after(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGroup_1()); }
(rule__Statement__Group_1__0)
{ after(grammarAccess.getStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getLocalVariableDeclarationParserRuleCall_1_0_0()); }
	ruleLocalVariableDeclaration
{ after(grammarAccess.getStatementAccess().getLocalVariableDeclarationParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTaskStatementParserRuleCall_1_0_1()); }
	ruleTaskStatement
{ after(grammarAccess.getStatementAccess().getTaskStatementParserRuleCall_1_0_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_1_0_2()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElseBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElseBlockAccess().getBlockParserRuleCall_0()); }
	ruleBlock
{ after(grammarAccess.getElseBlockAccess().getBlockParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElseBlockAccess().getIfStatementParserRuleCall_1()); }
	ruleIfStatement
{ after(grammarAccess.getElseBlockAccess().getIfStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TaskStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskStatementAccess().getAssignmentStatementParserRuleCall_0()); }
	ruleAssignmentStatement
{ after(grammarAccess.getTaskStatementAccess().getAssignmentStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTaskStatementAccess().getMethodInvocationExpressionParserRuleCall_1()); }
	ruleMethodInvocationExpression
{ after(grammarAccess.getTaskStatementAccess().getMethodInvocationExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__FwitRequirementModel__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FwitRequirementModel__Group__0__Impl
	rule__FwitRequirementModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FwitRequirementModel__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFwitRequirementModelAccess().getSystemAssignment_0()); }
(rule__FwitRequirementModel__SystemAssignment_0)?
{ after(grammarAccess.getFwitRequirementModelAccess().getSystemAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FwitRequirementModel__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FwitRequirementModel__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FwitRequirementModel__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFwitRequirementModelAccess().getElementsAssignment_1()); }
(rule__FwitRequirementModel__ElementsAssignment_1)*
{ after(grammarAccess.getFwitRequirementModelAccess().getElementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Include__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__0__Impl
	rule__Include__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }

	'include' 

{ after(grammarAccess.getIncludeAccess().getIncludeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Include__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Include__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Include__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getFileAssignment_1()); }
(rule__Include__FileAssignment_1)
{ after(grammarAccess.getIncludeAccess().getFileAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTypeKeyword_0()); }

	'type' 

{ after(grammarAccess.getTypeAccess().getTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
	rule__Type__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameAssignment_1()); }
(rule__Type__NameAssignment_1)
{ after(grammarAccess.getTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__2__Impl
	rule__Type__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getMappedToKeyword_2()); }

	'mapped-to' 

{ after(grammarAccess.getTypeAccess().getMappedToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__3__Impl
	rule__Type__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getClassNameAssignment_3()); }
(rule__Type__ClassNameAssignment_3)
{ after(grammarAccess.getTypeAccess().getClassNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getTypeAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SystemDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemDeclaration__Group__0__Impl
	rule__SystemDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getSystemKeyword_0()); }

	'system' 

{ after(grammarAccess.getSystemDeclarationAccess().getSystemKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SystemDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemDeclaration__Group__1__Impl
	rule__SystemDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getNameAssignment_1()); }
(rule__SystemDeclaration__NameAssignment_1)
{ after(grammarAccess.getSystemDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SystemDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemDeclaration__Group__2__Impl
	rule__SystemDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getExtendsKeyword_2()); }

	'extends' 

{ after(grammarAccess.getSystemDeclarationAccess().getExtendsKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SystemDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemDeclaration__Group__3__Impl
	rule__SystemDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getFrameworkAssignment_3()); }
(rule__SystemDeclaration__FrameworkAssignment_3)
{ after(grammarAccess.getSystemDeclarationAccess().getFrameworkAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SystemDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SystemDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getSystemDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getModuleKeyword_0()); }

	'module' 

{ after(grammarAccess.getModuleAccess().getModuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameAssignment_1()); }
(rule__Module__NameAssignment_1)
{ after(grammarAccess.getModuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
	rule__Module__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__3__Impl
	rule__Module__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getFieldsAssignment_3()); }
(rule__Module__FieldsAssignment_3)*
{ after(grammarAccess.getModuleAccess().getFieldsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__4__Impl
	rule__Module__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getFunctionsAssignment_4()); }
(rule__Module__FunctionsAssignment_4)*
{ after(grammarAccess.getModuleAccess().getFunctionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__FieldDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__0__Impl
	rule__FieldDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypeAssignment_0()); }
(rule__FieldDeclaration__TypeAssignment_0)
{ after(grammarAccess.getFieldDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__1__Impl
	rule__FieldDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getVariablesAssignment_1()); }
(rule__FieldDeclaration__VariablesAssignment_1)
{ after(grammarAccess.getFieldDeclarationAccess().getVariablesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__2__Impl
	rule__FieldDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getGroup_2()); }
(rule__FieldDeclaration__Group_2__0)*
{ after(grammarAccess.getFieldDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FieldDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group_2__0__Impl
	rule__FieldDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getFieldDeclarationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getVariablesAssignment_2_1()); }
(rule__FieldDeclaration__VariablesAssignment_2_1)
{ after(grammarAccess.getFieldDeclarationAccess().getVariablesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }

	'function' 

{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1()); }
(rule__FunctionDeclaration__NameAssignment_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_2()); }
(rule__FunctionDeclaration__BodyAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
(rule__Block__StatementsAssignment_1)*
{ after(grammarAccess.getBlockAccess().getStatementsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLeftOperandAssignment_0()); }
(rule__Expression__LeftOperandAssignment_0)
{ after(grammarAccess.getExpressionAccess().getLeftOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperatorAssignment_1_0()); }
(rule__Expression__OperatorAssignment_1_0)
{ after(grammarAccess.getExpressionAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__Expression__RightOperandAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getLeftOperandAssignment_0()); }
(rule__Conjunction__LeftOperandAssignment_0)
{ after(grammarAccess.getConjunctionAccess().getLeftOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
(rule__Conjunction__Group_1__0)?
{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_0()); }
(rule__Conjunction__OperatorAssignment_1_0)
{ after(grammarAccess.getConjunctionAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightOperandAssignment_1_1()); }
(rule__Conjunction__RightOperandAssignment_1_1)
{ after(grammarAccess.getConjunctionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparision__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparision__Group__0__Impl
	rule__Comparision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getLeftOperandAssignment_0()); }
(rule__Comparision__LeftOperandAssignment_0)
{ after(grammarAccess.getComparisionAccess().getLeftOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparision__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparision__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getGroup_1()); }
(rule__Comparision__Group_1__0)?
{ after(grammarAccess.getComparisionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparision__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparision__Group_1__0__Impl
	rule__Comparision__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getOperatorAssignment_1_0()); }
(rule__Comparision__OperatorAssignment_1_0)
{ after(grammarAccess.getComparisionAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparision__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparision__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getRightOperandAssignment_1_1()); }
(rule__Comparision__RightOperandAssignment_1_1)
{ after(grammarAccess.getComparisionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ValueExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group__0__Impl
	rule__ValueExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getLeftOperandAssignment_0()); }
(rule__ValueExpression__LeftOperandAssignment_0)
{ after(grammarAccess.getValueExpressionAccess().getLeftOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getGroup_1()); }
(rule__ValueExpression__Group_1__0)?
{ after(grammarAccess.getValueExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ValueExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_1__0__Impl
	rule__ValueExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getOperatorAssignment_1_0()); }
(rule__ValueExpression__OperatorAssignment_1_0)
{ after(grammarAccess.getValueExpressionAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ValueExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getRightOperandAssignment_1_1()); }
(rule__ValueExpression__RightOperandAssignment_1_1)
{ after(grammarAccess.getValueExpressionAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getLeftOperandAssignment_0()); }
(rule__Multiplication__LeftOperandAssignment_0)
{ after(grammarAccess.getMultiplicationAccess().getLeftOperandAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)?
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_0()); }
(rule__Multiplication__OperatorAssignment_1_0)
{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightOperandAssignment_1_1()); }
(rule__Multiplication__RightOperandAssignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getRightOperandAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PrefixOperatorExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixOperatorExpression__Group__0__Impl
	rule__PrefixOperatorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperatorExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixOperatorExpressionAccess().getOperatorAssignment_0()); }
(rule__PrefixOperatorExpression__OperatorAssignment_0)
{ after(grammarAccess.getPrefixOperatorExpressionAccess().getOperatorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixOperatorExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PrefixOperatorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperatorExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixOperatorExpressionAccess().getOperandAssignment_1()); }
(rule__PrefixOperatorExpression__OperandAssignment_1)
{ after(grammarAccess.getPrefixOperatorExpressionAccess().getOperandAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodInvocationExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocationExpression__Group__0__Impl
	rule__MethodInvocationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocationExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getGroup_0()); }
(rule__MethodInvocationExpression__Group_0__0)?
{ after(grammarAccess.getMethodInvocationExpressionAccess().getGroup_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocationExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocationExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getMethodAssignment_1()); }
(rule__MethodInvocationExpression__MethodAssignment_1)
{ after(grammarAccess.getMethodInvocationExpressionAccess().getMethodAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodInvocationExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocationExpression__Group_0__0__Impl
	rule__MethodInvocationExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocationExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getReceiverAssignment_0_0()); }
(rule__MethodInvocationExpression__ReceiverAssignment_0_0)
{ after(grammarAccess.getMethodInvocationExpressionAccess().getReceiverAssignment_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocationExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocationExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocationExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getFullStopKeyword_0_1()); }

	'.' 

{ after(grammarAccess.getMethodInvocationExpressionAccess().getFullStopKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodInvocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__0__Impl
	rule__MethodInvocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getNameAssignment_0()); }
(rule__MethodInvocation__NameAssignment_0)
{ after(grammarAccess.getMethodInvocationAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__1__Impl
	rule__MethodInvocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getMethodInvocationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__2__Impl
	rule__MethodInvocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getGroup_2()); }
(rule__MethodInvocation__Group_2__0)?
{ after(grammarAccess.getMethodInvocationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getMethodInvocationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MethodInvocation__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group_2__0__Impl
	rule__MethodInvocation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgumentsAssignment_2_0()); }
(rule__MethodInvocation__ArgumentsAssignment_2_0)
{ after(grammarAccess.getMethodInvocationAccess().getArgumentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getGroup_2_1()); }
(rule__MethodInvocation__Group_2_1__0)*
{ after(grammarAccess.getMethodInvocationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodInvocation__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group_2_1__0__Impl
	rule__MethodInvocation__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getMethodInvocationAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodInvocation__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodInvocation__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgumentsAssignment_2_1_1()); }
(rule__MethodInvocation__ArgumentsAssignment_2_1_1)
{ after(grammarAccess.getMethodInvocationAccess().getArgumentsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__0__Impl
	rule__Statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_1_0()); }
(rule__Statement__Alternatives_1_0)
{ after(grammarAccess.getStatementAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LocalVariableDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__0__Impl
	rule__LocalVariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getTypeAssignment_0()); }
(rule__LocalVariableDeclaration__TypeAssignment_0)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__1__Impl
	rule__LocalVariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getVariablesAssignment_1()); }
(rule__LocalVariableDeclaration__VariablesAssignment_1)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getVariablesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getGroup_2()); }
(rule__LocalVariableDeclaration__Group_2__0)*
{ after(grammarAccess.getLocalVariableDeclarationAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LocalVariableDeclaration__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group_2__0__Impl
	rule__LocalVariableDeclaration__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getLocalVariableDeclarationAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariableDeclaration__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVariableDeclaration__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getVariablesAssignment_2_1()); }
(rule__LocalVariableDeclaration__VariablesAssignment_2_1)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getVariablesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfStatementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionAssignment_1()); }
(rule__IfStatement__ConditionAssignment_1)
{ after(grammarAccess.getIfStatementAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenBlokAssignment_2()); }
(rule__IfStatement__ThenBlokAssignment_2)
{ after(grammarAccess.getIfStatementAccess().getThenBlokAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getGroup_3()); }
(rule__IfStatement__Group_3__0)?
{ after(grammarAccess.getIfStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__0__Impl
	rule__IfStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }

	'else' 

{ after(grammarAccess.getIfStatementAccess().getElseKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockAssignment_3_1()); }
(rule__IfStatement__ElseBlockAssignment_3_1)
{ after(grammarAccess.getIfStatementAccess().getElseBlockAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignmentStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__0__Impl
	rule__AssignmentStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0()); }
(rule__AssignmentStatement__VariableAssignment_0)
{ after(grammarAccess.getAssignmentStatementAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__1__Impl
	rule__AssignmentStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getOperatorAssignment_1()); }
(rule__AssignmentStatement__OperatorAssignment_1)
{ after(grammarAccess.getAssignmentStatementAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignmentStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignmentStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getValueAssignment_2()); }
(rule__AssignmentStatement__ValueAssignment_2)
{ after(grammarAccess.getAssignmentStatementAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__0__Impl
	rule__ParExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__1__Impl
	rule__ParExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getExpressionAssignment_1()); }
(rule__ParExpression__ExpressionAssignment_1)
{ after(grammarAccess.getParExpressionAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__FwitRequirementModel__SystemAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFwitRequirementModelAccess().getSystemSystemDeclarationParserRuleCall_0_0()); }
	ruleSystemDeclaration{ after(grammarAccess.getFwitRequirementModelAccess().getSystemSystemDeclarationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FwitRequirementModel__ElementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFwitRequirementModelAccess().getElementsSystemElementParserRuleCall_1_0()); }
	ruleSystemElement{ after(grammarAccess.getFwitRequirementModelAccess().getElementsSystemElementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Include__FileAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeAccess().getFileSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeAccess().getFileSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__ClassNameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getClassNameQualifiedNameParserRuleCall_3_0()); }
	ruleQualifiedName{ after(grammarAccess.getTypeAccess().getClassNameQualifiedNameParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSystemDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SystemDeclaration__FrameworkAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSystemDeclarationAccess().getFrameworkQualifiedExpressionParserRuleCall_3_0()); }
	ruleQualifiedExpression{ after(grammarAccess.getSystemDeclarationAccess().getFrameworkQualifiedExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__FieldsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getFieldsFieldDeclarationParserRuleCall_3_0()); }
	ruleFieldDeclaration{ after(grammarAccess.getModuleAccess().getFieldsFieldDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__FunctionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getFunctionsFunctionDeclarationParserRuleCall_4_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getModuleAccess().getFunctionsFunctionDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypeTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getFieldDeclarationAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFieldDeclarationAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFieldDeclarationAccess().getTypeTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__VariablesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFieldDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDeclaration__VariablesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getFieldDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_2_0()); }
	ruleBlock{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__LeftOperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getLeftOperandConjunctionParserRuleCall_0_0()); }
	ruleConjunction{ after(grammarAccess.getExpressionAccess().getLeftOperandConjunctionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperatorVerticalLineKeyword_1_0_0()); }
(
{ before(grammarAccess.getExpressionAccess().getOperatorVerticalLineKeyword_1_0_0()); }

	'|' 

{ after(grammarAccess.getExpressionAccess().getOperatorVerticalLineKeyword_1_0_0()); }
)

{ after(grammarAccess.getExpressionAccess().getOperatorVerticalLineKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightOperandExpressionParserRuleCall_1_1_0()); }
	ruleExpression{ after(grammarAccess.getExpressionAccess().getRightOperandExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__LeftOperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getLeftOperandComparisionParserRuleCall_0_0()); }
	ruleComparision{ after(grammarAccess.getConjunctionAccess().getLeftOperandComparisionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAmpersandKeyword_1_0_0()); }
(
{ before(grammarAccess.getConjunctionAccess().getOperatorAmpersandKeyword_1_0_0()); }

	'&' 

{ after(grammarAccess.getConjunctionAccess().getOperatorAmpersandKeyword_1_0_0()); }
)

{ after(grammarAccess.getConjunctionAccess().getOperatorAmpersandKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getRightOperandConjunctionParserRuleCall_1_1_0()); }
	ruleConjunction{ after(grammarAccess.getConjunctionAccess().getRightOperandConjunctionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__LeftOperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getLeftOperandValueExpressionParserRuleCall_0_0()); }
	ruleValueExpression{ after(grammarAccess.getComparisionAccess().getLeftOperandValueExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getOperatorComparatorParserRuleCall_1_0_0()); }
	ruleComparator{ after(grammarAccess.getComparisionAccess().getOperatorComparatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparision__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisionAccess().getRightOperandComparisionParserRuleCall_1_1_0()); }
	ruleComparision{ after(grammarAccess.getComparisionAccess().getRightOperandComparisionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__LeftOperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getLeftOperandMultiplicationParserRuleCall_0_0()); }
	ruleMultiplication{ after(grammarAccess.getValueExpressionAccess().getLeftOperandMultiplicationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getOperatorAddOperatorParserRuleCall_1_0_0()); }
	ruleAddOperator{ after(grammarAccess.getValueExpressionAccess().getOperatorAddOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueExpressionAccess().getRightOperandValueExpressionParserRuleCall_1_1_0()); }
	ruleValueExpression{ after(grammarAccess.getValueExpressionAccess().getRightOperandValueExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__LeftOperandAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getLeftOperandBasicExpressionParserRuleCall_0_0()); }
	ruleBasicExpression{ after(grammarAccess.getMultiplicationAccess().getLeftOperandBasicExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getOperatorMultiOperatorParserRuleCall_1_0_0()); }
	ruleMultiOperator{ after(grammarAccess.getMultiplicationAccess().getOperatorMultiOperatorParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightOperandAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getRightOperandBasicExpressionParserRuleCall_1_1_0()); }
	ruleBasicExpression{ after(grammarAccess.getMultiplicationAccess().getRightOperandBasicExpressionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleLiteralAccess().getValueIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getSimpleLiteralAccess().getValueIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IntegerLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedExpressionAccess().getValueQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName{ after(grammarAccess.getQualifiedExpressionAccess().getValueQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullLiteralAccess().getValueNullExpressionParserRuleCall_0()); }
	ruleNullExpression{ after(grammarAccess.getNullLiteralAccess().getValueNullExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperatorExpression__OperatorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixOperatorExpressionAccess().getOperatorPrefixOperatorParserRuleCall_0_0()); }
	rulePrefixOperator{ after(grammarAccess.getPrefixOperatorExpressionAccess().getOperatorPrefixOperatorParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixOperatorExpression__OperandAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixOperatorExpressionAccess().getOperandExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getPrefixOperatorExpressionAccess().getOperandExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocationExpression__ReceiverAssignment_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getReceiverVariableDeclarationCrossReference_0_0_0()); }
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getReceiverVariableDeclarationIDTerminalRuleCall_0_0_0_1()); }
	RULE_ID{ after(grammarAccess.getMethodInvocationExpressionAccess().getReceiverVariableDeclarationIDTerminalRuleCall_0_0_0_1()); }
)
{ after(grammarAccess.getMethodInvocationExpressionAccess().getReceiverVariableDeclarationCrossReference_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocationExpression__MethodAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationExpressionAccess().getMethodMethodInvocationParserRuleCall_1_0()); }
	ruleMethodInvocation{ after(grammarAccess.getMethodInvocationExpressionAccess().getMethodMethodInvocationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getNameSimpleLiteralParserRuleCall_0_0()); }
	ruleSimpleLiteral{ after(grammarAccess.getMethodInvocationAccess().getNameSimpleLiteralParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__ArgumentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getMethodInvocationAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodInvocation__ArgumentsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodInvocationAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getMethodInvocationAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeCrossReference_0_0()); }
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__VariablesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getLocalVariableDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariableDeclaration__VariablesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVariableDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); }
	ruleVariableDeclaration{ after(grammarAccess.getLocalVariableDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getConditionParExpressionParserRuleCall_1_0()); }
	ruleParExpression{ after(grammarAccess.getIfStatementAccess().getConditionParExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ThenBlokAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getThenBlokBlockParserRuleCall_2_0()); }
	ruleBlock{ after(grammarAccess.getIfStatementAccess().getThenBlokBlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseBlockAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfStatementAccess().getElseBlockElseBlockParserRuleCall_3_1_0()); }
	ruleElseBlock{ after(grammarAccess.getIfStatementAccess().getElseBlockElseBlockParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getValueReturnKeyword_0()); }
(
{ before(grammarAccess.getReturnStatementAccess().getValueReturnKeyword_0()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getValueReturnKeyword_0()); }
)

{ after(grammarAccess.getReturnStatementAccess().getValueReturnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getVariableVariableDeclarationCrossReference_0_0()); }
(
{ before(grammarAccess.getAssignmentStatementAccess().getVariableVariableDeclarationIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getAssignmentStatementAccess().getVariableVariableDeclarationIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getAssignmentStatementAccess().getVariableVariableDeclarationCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getOperatorAssignmentOperatorParserRuleCall_1_0()); }
	ruleAssignmentOperator{ after(grammarAccess.getAssignmentStatementAccess().getOperatorAssignmentOperatorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentStatement__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParExpression__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getParExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


