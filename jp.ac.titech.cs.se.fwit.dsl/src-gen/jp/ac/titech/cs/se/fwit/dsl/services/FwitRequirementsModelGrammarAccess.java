/*
* generated by Xtext
*/

package jp.ac.titech.cs.se.fwit.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class FwitRequirementsModelGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FwitRequirementModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FwitRequirementModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSystemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSystemSystemDeclarationParserRuleCall_0_0 = (RuleCall)cSystemAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSystemElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//FwitRequirementModel:
		//	system=SystemDeclaration? elements+=SystemElement*;
		public ParserRule getRule() { return rule; }

		//system=SystemDeclaration? elements+=SystemElement*
		public Group getGroup() { return cGroup; }

		//system=SystemDeclaration?
		public Assignment getSystemAssignment_0() { return cSystemAssignment_0; }

		//SystemDeclaration
		public RuleCall getSystemSystemDeclarationParserRuleCall_0_0() { return cSystemSystemDeclarationParserRuleCall_0_0; }

		//elements+=SystemElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//SystemElement
		public RuleCall getElementsSystemElementParserRuleCall_1_0() { return cElementsSystemElementParserRuleCall_1_0; }
	}

	public class SystemElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIncludeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModuleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SystemElement:
		//	Include | Type | Module;
		public ParserRule getRule() { return rule; }

		//Include | Type | Module
		public Alternatives getAlternatives() { return cAlternatives; }

		//Include
		public RuleCall getIncludeParserRuleCall_0() { return cIncludeParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//Module
		public RuleCall getModuleParserRuleCall_2() { return cModuleParserRuleCall_2; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFileAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFileSTRINGTerminalRuleCall_1_0 = (RuleCall)cFileAssignment_1.eContents().get(0);
		
		//Include:
		//	"include" file=STRING;
		public ParserRule getRule() { return rule; }

		//"include" file=STRING
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//file=STRING
		public Assignment getFileAssignment_1() { return cFileAssignment_1; }

		//STRING
		public RuleCall getFileSTRINGTerminalRuleCall_1_0() { return cFileSTRINGTerminalRuleCall_1_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMappedToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Type: //'type' name=ID 'mapped-to' className=[types::JvmType|QualifiedName]';';
		//	"type" name=ID "mapped-to" className=QualifiedName ";";
		public ParserRule getRule() { return rule; }

		////'type' name=ID 'mapped-to' className=[types::JvmType|QualifiedName]';';
		//"type" name=ID "mapped-to" className=QualifiedName ";"
		public Group getGroup() { return cGroup; }

		////'type' name=ID 'mapped-to' className=[types::JvmType|QualifiedName]';';
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"mapped-to"
		public Keyword getMappedToKeyword_2() { return cMappedToKeyword_2; }

		//className=QualifiedName
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }

		//QualifiedName
		public RuleCall getClassNameQualifiedNameParserRuleCall_3_0() { return cClassNameQualifiedNameParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class SystemDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SystemDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExtendsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFrameworkAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFrameworkQualifiedExpressionParserRuleCall_3_0 = (RuleCall)cFrameworkAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *'type' (className=QualifiedName 'as')? name=ID';';* / SystemDeclaration:
		//	"system" name=ID "extends" framework=QualifiedExpression ";";
		public ParserRule getRule() { return rule; }

		//"system" name=ID "extends" framework=QualifiedExpression ";"
		public Group getGroup() { return cGroup; }

		//"system"
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"extends"
		public Keyword getExtendsKeyword_2() { return cExtendsKeyword_2; }

		//framework=QualifiedExpression
		public Assignment getFrameworkAssignment_3() { return cFrameworkAssignment_3; }

		//QualifiedExpression
		public RuleCall getFrameworkQualifiedExpressionParserRuleCall_3_0() { return cFrameworkQualifiedExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldsFieldDeclarationParserRuleCall_3_0 = (RuleCall)cFieldsAssignment_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionsFunctionDeclarationParserRuleCall_4_0 = (RuleCall)cFunctionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Module:
		//	"module" name=ID "{" fields+=FieldDeclaration* functions+=FunctionDeclaration* "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID "{" fields+=FieldDeclaration* functions+=FunctionDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//fields+=FieldDeclaration*
		public Assignment getFieldsAssignment_3() { return cFieldsAssignment_3; }

		//FieldDeclaration
		public RuleCall getFieldsFieldDeclarationParserRuleCall_3_0() { return cFieldsFieldDeclarationParserRuleCall_3_0; }

		//functions+=FunctionDeclaration*
		public Assignment getFunctionsAssignment_4() { return cFunctionsAssignment_4; }

		//FunctionDeclaration
		public RuleCall getFunctionsFunctionDeclarationParserRuleCall_4_0() { return cFunctionsFunctionDeclarationParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldDeclaration:
		//	type=[Type] variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";";
		public ParserRule getRule() { return rule; }

		//type=[Type] variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";"
		public Group getGroup() { return cGroup; }

		//type=[Type]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_1; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }

		//("," variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyBlockParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//FunctionDeclaration:
		//	"function" name=ID body=Block;
		public ParserRule getRule() { return rule; }

		//"function" name=ID body=Block
		public Group getGroup() { return cGroup; }

		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//body=Block
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_2_0() { return cBodyBlockParserRuleCall_2_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//"{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class ComparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Comparator:
		//	"==" | "!=" | "<=" | ">=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "<=" | ">=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
	}

	public class AddOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AddOperator:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiOperator:
		//	"*" | "%" | "/";
		public ParserRule getRule() { return rule; }

		//"*" | "%" | "/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperandConjunctionParserRuleCall_0_0 = (RuleCall)cLeftOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorVerticalLineKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//Expression:
		//	leftOperand=Conjunction (operator="|" rightOperand=Expression)?;
		public ParserRule getRule() { return rule; }

		//leftOperand=Conjunction (operator="|" rightOperand=Expression)?
		public Group getGroup() { return cGroup; }

		//leftOperand=Conjunction
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }

		//Conjunction
		public RuleCall getLeftOperandConjunctionParserRuleCall_0_0() { return cLeftOperandConjunctionParserRuleCall_0_0; }

		//(operator="|" rightOperand=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//operator="|"
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//"|"
		public Keyword getOperatorVerticalLineKeyword_1_0_0() { return cOperatorVerticalLineKeyword_1_0_0; }

		//rightOperand=Expression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//Expression
		public RuleCall getRightOperandExpressionParserRuleCall_1_1_0() { return cRightOperandExpressionParserRuleCall_1_1_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperandComparisionParserRuleCall_0_0 = (RuleCall)cLeftOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOperatorAmpersandKeyword_1_0_0 = (Keyword)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandConjunctionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//Conjunction:
		//	leftOperand=Comparision (operator="&" rightOperand=Conjunction)?;
		public ParserRule getRule() { return rule; }

		//leftOperand=Comparision (operator="&" rightOperand=Conjunction)?
		public Group getGroup() { return cGroup; }

		//leftOperand=Comparision
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }

		//Comparision
		public RuleCall getLeftOperandComparisionParserRuleCall_0_0() { return cLeftOperandComparisionParserRuleCall_0_0; }

		//(operator="&" rightOperand=Conjunction)?
		public Group getGroup_1() { return cGroup_1; }

		//operator="&"
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//"&"
		public Keyword getOperatorAmpersandKeyword_1_0_0() { return cOperatorAmpersandKeyword_1_0_0; }

		//rightOperand=Conjunction
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//Conjunction
		public RuleCall getRightOperandConjunctionParserRuleCall_1_1_0() { return cRightOperandConjunctionParserRuleCall_1_1_0; }
	}

	public class ComparisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperandValueExpressionParserRuleCall_0_0 = (RuleCall)cLeftOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorComparatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandComparisionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//Comparision:
		//	leftOperand=ValueExpression (operator=Comparator rightOperand=Comparision)?;
		public ParserRule getRule() { return rule; }

		//leftOperand=ValueExpression (operator=Comparator rightOperand=Comparision)?
		public Group getGroup() { return cGroup; }

		//leftOperand=ValueExpression
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }

		//ValueExpression
		public RuleCall getLeftOperandValueExpressionParserRuleCall_0_0() { return cLeftOperandValueExpressionParserRuleCall_0_0; }

		//(operator=Comparator rightOperand=Comparision)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=Comparator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//Comparator
		public RuleCall getOperatorComparatorParserRuleCall_1_0_0() { return cOperatorComparatorParserRuleCall_1_0_0; }

		//rightOperand=Comparision
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//Comparision
		public RuleCall getRightOperandComparisionParserRuleCall_1_1_0() { return cRightOperandComparisionParserRuleCall_1_1_0; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperandMultiplicationParserRuleCall_0_0 = (RuleCall)cLeftOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorAddOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandValueExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//ValueExpression:
		//	leftOperand=Multiplication (operator=AddOperator rightOperand=ValueExpression)?;
		public ParserRule getRule() { return rule; }

		//leftOperand=Multiplication (operator=AddOperator rightOperand=ValueExpression)?
		public Group getGroup() { return cGroup; }

		//leftOperand=Multiplication
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }

		//Multiplication
		public RuleCall getLeftOperandMultiplicationParserRuleCall_0_0() { return cLeftOperandMultiplicationParserRuleCall_0_0; }

		//(operator=AddOperator rightOperand=ValueExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=AddOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//AddOperator
		public RuleCall getOperatorAddOperatorParserRuleCall_1_0_0() { return cOperatorAddOperatorParserRuleCall_1_0_0; }

		//rightOperand=ValueExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//ValueExpression
		public RuleCall getRightOperandValueExpressionParserRuleCall_1_1_0() { return cRightOperandValueExpressionParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftOperandBasicExpressionParserRuleCall_0_0 = (RuleCall)cLeftOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorMultiOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandBasicExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//Multiplication:
		//	leftOperand=BasicExpression (operator=MultiOperator rightOperand=BasicExpression)?;
		public ParserRule getRule() { return rule; }

		//leftOperand=BasicExpression (operator=MultiOperator rightOperand=BasicExpression)?
		public Group getGroup() { return cGroup; }

		//leftOperand=BasicExpression
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }

		//BasicExpression
		public RuleCall getLeftOperandBasicExpressionParserRuleCall_0_0() { return cLeftOperandBasicExpressionParserRuleCall_0_0; }

		//(operator=MultiOperator rightOperand=BasicExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//operator=MultiOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//MultiOperator
		public RuleCall getOperatorMultiOperatorParserRuleCall_1_0_0() { return cOperatorMultiOperatorParserRuleCall_1_0_0; }

		//rightOperand=BasicExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//BasicExpression
		public RuleCall getRightOperandBasicExpressionParserRuleCall_1_1_0() { return cRightOperandBasicExpressionParserRuleCall_1_1_0; }
	}

	public class BasicExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrefixOperatorExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodInvocationExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cQualifiedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNameParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BasicExpression:
		//	ParExpression | PrefixOperatorExpression | MethodInvocationExpression | QualifiedExpression | Name;
		public ParserRule getRule() { return rule; }

		//ParExpression | PrefixOperatorExpression | MethodInvocationExpression | QualifiedExpression | Name
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParExpression
		public RuleCall getParExpressionParserRuleCall_0() { return cParExpressionParserRuleCall_0; }

		//PrefixOperatorExpression
		public RuleCall getPrefixOperatorExpressionParserRuleCall_1() { return cPrefixOperatorExpressionParserRuleCall_1; }

		//MethodInvocationExpression
		public RuleCall getMethodInvocationExpressionParserRuleCall_2() { return cMethodInvocationExpressionParserRuleCall_2; }

		//QualifiedExpression
		public RuleCall getQualifiedExpressionParserRuleCall_3() { return cQualifiedExpressionParserRuleCall_3; }

		//Name
		public RuleCall getNameParserRuleCall_4() { return cNameParserRuleCall_4; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final RuleCall cLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Name:
		//	Literal;
		public ParserRule getRule() { return rule; }

		//Literal
		public RuleCall getLiteralParserRuleCall() { return cLiteralParserRuleCall; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	SimpleLiteral | StringLiteral | IntegerLiteral | NullLiteral;
		public ParserRule getRule() { return rule; }

		//SimpleLiteral | StringLiteral | IntegerLiteral | NullLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleLiteral
		public RuleCall getSimpleLiteralParserRuleCall_0() { return cSimpleLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_2() { return cIntegerLiteralParserRuleCall_2; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_3() { return cNullLiteralParserRuleCall_3; }
	}

	public class SimpleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SimpleLiteral returns EString:
		//	value=ID;
		public ParserRule getRule() { return rule; }

		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerLiteral:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class QualifiedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueQualifiedNameParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//QualifiedExpression:
		//	value=QualifiedName;
		public ParserRule getRule() { return rule; }

		//value=QualifiedName
		public Assignment getValueAssignment() { return cValueAssignment; }

		//QualifiedName
		public RuleCall getValueQualifiedNameParserRuleCall_0() { return cValueQualifiedNameParserRuleCall_0; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNullExpressionParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NullLiteral:
		//	value=NullExpression;
		public ParserRule getRule() { return rule; }

		//value=NullExpression
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NullExpression
		public RuleCall getValueNullExpressionParserRuleCall_0() { return cValueNullExpressionParserRuleCall_0; }
	}

	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullExpression");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NullExpression:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}

	public class PrefixOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorPrefixOperatorParserRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//PrefixOperatorExpression:
		//	operator=PrefixOperator operand=Expression;
		public ParserRule getRule() { return rule; }

		//operator=PrefixOperator operand=Expression
		public Group getGroup() { return cGroup; }

		//operator=PrefixOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//PrefixOperator
		public RuleCall getOperatorPrefixOperatorParserRuleCall_0_0() { return cOperatorPrefixOperatorParserRuleCall_0_0; }

		//operand=Expression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }

		//Expression
		public RuleCall getOperandExpressionParserRuleCall_1_0() { return cOperandExpressionParserRuleCall_1_0; }
	}

	public class MethodInvocationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodInvocationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cReceiverAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReceiverVariableDeclarationCrossReference_0_0_0 = (CrossReference)cReceiverAssignment_0_0.eContents().get(0);
		private final RuleCall cReceiverVariableDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReceiverVariableDeclarationCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethodMethodInvocationParserRuleCall_1_0 = (RuleCall)cMethodAssignment_1.eContents().get(0);
		
		//MethodInvocationExpression:
		//	(receiver=[VariableDeclaration] ".")? method=MethodInvocation;
		public ParserRule getRule() { return rule; }

		//(receiver=[VariableDeclaration] ".")? method=MethodInvocation
		public Group getGroup() { return cGroup; }

		//(receiver=[VariableDeclaration] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//receiver=[VariableDeclaration]
		public Assignment getReceiverAssignment_0_0() { return cReceiverAssignment_0_0; }

		//[VariableDeclaration]
		public CrossReference getReceiverVariableDeclarationCrossReference_0_0_0() { return cReceiverVariableDeclarationCrossReference_0_0_0; }

		//ID
		public RuleCall getReceiverVariableDeclarationIDTerminalRuleCall_0_0_0_1() { return cReceiverVariableDeclarationIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//method=MethodInvocation
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//MethodInvocation
		public RuleCall getMethodMethodInvocationParserRuleCall_1_0() { return cMethodMethodInvocationParserRuleCall_1_0; }
	}

	public class MethodInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSimpleLiteralParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodInvocation:
		//	name=SimpleLiteral "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=SimpleLiteral "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=SimpleLiteral
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SimpleLiteral
		public RuleCall getNameSimpleLiteralParserRuleCall_0_0() { return cNameSimpleLiteralParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cLocalVariableDeclarationParserRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cTaskStatementParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Statement:
		//	IfStatement | (LocalVariableDeclaration | TaskStatement | ReturnStatement) ";";
		public ParserRule getRule() { return rule; }

		//IfStatement | (LocalVariableDeclaration | TaskStatement | ReturnStatement) ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }

		//(LocalVariableDeclaration | TaskStatement | ReturnStatement) ";"
		public Group getGroup_1() { return cGroup_1; }

		//LocalVariableDeclaration | TaskStatement | ReturnStatement
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//LocalVariableDeclaration
		public RuleCall getLocalVariableDeclarationParserRuleCall_1_0_0() { return cLocalVariableDeclarationParserRuleCall_1_0_0; }

		//TaskStatement
		public RuleCall getTaskStatementParserRuleCall_1_0_1() { return cTaskStatementParserRuleCall_1_0_1; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_1_0_2() { return cReturnStatementParserRuleCall_1_0_2; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class LocalVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cVariablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_1_0 = (RuleCall)cVariablesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariablesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cVariablesAssignment_2_1.eContents().get(0);
		
		//LocalVariableDeclaration:
		//	type=[Type] variables+=VariableDeclaration ("," variables+=VariableDeclaration)*;
		public ParserRule getRule() { return rule; }

		//type=[Type] variables+=VariableDeclaration ("," variables+=VariableDeclaration)*
		public Group getGroup() { return cGroup; }

		//type=[Type]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//ID
		public RuleCall getTypeTypeIDTerminalRuleCall_0_0_1() { return cTypeTypeIDTerminalRuleCall_0_0_1; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_1() { return cVariablesAssignment_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_1_0() { return cVariablesVariableDeclarationParserRuleCall_1_0; }

		//("," variables+=VariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_1() { return cVariablesAssignment_2_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_1_0() { return cVariablesVariableDeclarationParserRuleCall_2_1_0; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionParExpressionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Assignment cThenBlokAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cThenBlokBlockParserRuleCall_2_0 = (RuleCall)cThenBlokAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseBlockAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseBlockElseBlockParserRuleCall_3_1_0 = (RuleCall)cElseBlockAssignment_3_1.eContents().get(0);
		
		//IfStatement:
		//	"if" condition=ParExpression thenBlok=Block ("else" elseBlock=ElseBlock)?;
		public ParserRule getRule() { return rule; }

		//"if" condition=ParExpression thenBlok=Block ("else" elseBlock=ElseBlock)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=ParExpression
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//ParExpression
		public RuleCall getConditionParExpressionParserRuleCall_1_0() { return cConditionParExpressionParserRuleCall_1_0; }

		//thenBlok=Block
		public Assignment getThenBlokAssignment_2() { return cThenBlokAssignment_2; }

		//Block
		public RuleCall getThenBlokBlockParserRuleCall_2_0() { return cThenBlokBlockParserRuleCall_2_0; }

		//("else" elseBlock=ElseBlock)?
		public Group getGroup_3() { return cGroup_3; }

		//"else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }

		//elseBlock=ElseBlock
		public Assignment getElseBlockAssignment_3_1() { return cElseBlockAssignment_3_1; }

		//ElseBlock
		public RuleCall getElseBlockElseBlockParserRuleCall_3_1_0() { return cElseBlockElseBlockParserRuleCall_3_1_0; }
	}

	public class ElseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ElseBlock:
		//	Block | IfStatement;
		public ParserRule getRule() { return rule; }

		//Block | IfStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//Block
		public RuleCall getBlockParserRuleCall_0() { return cBlockParserRuleCall_0; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_1() { return cIfStatementParserRuleCall_1; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnStatement");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueReturnKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//ReturnStatement:
		//	value="return";
		public ParserRule getRule() { return rule; }

		//value="return"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"return"
		public Keyword getValueReturnKeyword_0() { return cValueReturnKeyword_0; }
	}

	public class TaskStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodInvocationExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TaskStatement:
		//	AssignmentStatement | MethodInvocationExpression;
		public ParserRule getRule() { return rule; }

		//AssignmentStatement | MethodInvocationExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignmentStatement
		public RuleCall getAssignmentStatementParserRuleCall_0() { return cAssignmentStatementParserRuleCall_0; }

		//MethodInvocationExpression
		public RuleCall getMethodInvocationExpressionParserRuleCall_1() { return cMethodInvocationExpressionParserRuleCall_1; }
	}

	public class AssignmentStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableVariableDeclarationCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableVariableDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableVariableDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AssignmentStatement:
		//	variable=[VariableDeclaration] operator=AssignmentOperator value=Expression;
		public ParserRule getRule() { return rule; }

		//variable=[VariableDeclaration] operator=AssignmentOperator value=Expression
		public Group getGroup() { return cGroup; }

		//variable=[VariableDeclaration]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//[VariableDeclaration]
		public CrossReference getVariableVariableDeclarationCrossReference_0_0() { return cVariableVariableDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getVariableVariableDeclarationIDTerminalRuleCall_0_0_1() { return cVariableVariableDeclarationIDTerminalRuleCall_0_0_1; }

		//operator=AssignmentOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//AssignmentOperator
		public RuleCall getOperatorAssignmentOperatorParserRuleCall_1_0() { return cOperatorAssignmentOperatorParserRuleCall_1_0; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParExpression:
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//// should varilable name be "name"?	
		//VariableDeclaration:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class PrefixOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixOperator");
		private final Keyword cExclamationMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//PrefixOperator:
		//	"!";
		public ParserRule getRule() { return rule; }

		//"!"
		public Keyword getExclamationMarkKeyword() { return cExclamationMarkKeyword; }
	}

	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentOperator");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//AssignmentOperator:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private FwitRequirementModelElements pFwitRequirementModel;
	private SystemElementElements pSystemElement;
	private IncludeElements pInclude;
	private TypeElements pType;
	private SystemDeclarationElements pSystemDeclaration;
	private ModuleElements pModule;
	private FieldDeclarationElements pFieldDeclaration;
	private FunctionDeclarationElements pFunctionDeclaration;
	private BlockElements pBlock;
	private ComparatorElements pComparator;
	private AddOperatorElements pAddOperator;
	private MultiOperatorElements pMultiOperator;
	private ExpressionElements pExpression;
	private ConjunctionElements pConjunction;
	private ComparisionElements pComparision;
	private ValueExpressionElements pValueExpression;
	private MultiplicationElements pMultiplication;
	private BasicExpressionElements pBasicExpression;
	private NameElements pName;
	private LiteralElements pLiteral;
	private SimpleLiteralElements pSimpleLiteral;
	private StringLiteralElements pStringLiteral;
	private IntegerLiteralElements pIntegerLiteral;
	private QualifiedExpressionElements pQualifiedExpression;
	private NullLiteralElements pNullLiteral;
	private NullExpressionElements pNullExpression;
	private PrefixOperatorExpressionElements pPrefixOperatorExpression;
	private MethodInvocationExpressionElements pMethodInvocationExpression;
	private MethodInvocationElements pMethodInvocation;
	private StatementElements pStatement;
	private LocalVariableDeclarationElements pLocalVariableDeclaration;
	private IfStatementElements pIfStatement;
	private ElseBlockElements pElseBlock;
	private ReturnStatementElements pReturnStatement;
	private TaskStatementElements pTaskStatement;
	private AssignmentStatementElements pAssignmentStatement;
	private ParExpressionElements pParExpression;
	private VariableDeclarationElements pVariableDeclaration;
	private PrefixOperatorElements pPrefixOperator;
	private AssignmentOperatorElements pAssignmentOperator;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public FwitRequirementsModelGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FwitRequirementModel:
	//	system=SystemDeclaration? elements+=SystemElement*;
	public FwitRequirementModelElements getFwitRequirementModelAccess() {
		return (pFwitRequirementModel != null) ? pFwitRequirementModel : (pFwitRequirementModel = new FwitRequirementModelElements());
	}
	
	public ParserRule getFwitRequirementModelRule() {
		return getFwitRequirementModelAccess().getRule();
	}

	//SystemElement:
	//	Include | Type | Module;
	public SystemElementElements getSystemElementAccess() {
		return (pSystemElement != null) ? pSystemElement : (pSystemElement = new SystemElementElements());
	}
	
	public ParserRule getSystemElementRule() {
		return getSystemElementAccess().getRule();
	}

	//Include:
	//	"include" file=STRING;
	public IncludeElements getIncludeAccess() {
		return (pInclude != null) ? pInclude : (pInclude = new IncludeElements());
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//Type: //'type' name=ID 'mapped-to' className=[types::JvmType|QualifiedName]';';
	//	"type" name=ID "mapped-to" className=QualifiedName ";";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	/// *'type' (className=QualifiedName 'as')? name=ID';';* / SystemDeclaration:
	//	"system" name=ID "extends" framework=QualifiedExpression ";";
	public SystemDeclarationElements getSystemDeclarationAccess() {
		return (pSystemDeclaration != null) ? pSystemDeclaration : (pSystemDeclaration = new SystemDeclarationElements());
	}
	
	public ParserRule getSystemDeclarationRule() {
		return getSystemDeclarationAccess().getRule();
	}

	//Module:
	//	"module" name=ID "{" fields+=FieldDeclaration* functions+=FunctionDeclaration* "}";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//FieldDeclaration:
	//	type=[Type] variables+=VariableDeclaration ("," variables+=VariableDeclaration)* ";";
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return (pFieldDeclaration != null) ? pFieldDeclaration : (pFieldDeclaration = new FieldDeclarationElements());
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//FunctionDeclaration:
	//	"function" name=ID body=Block;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Block:
	//	"{" statements+=Statement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//Comparator:
	//	"==" | "!=" | "<=" | ">=" | ">" | "<";
	public ComparatorElements getComparatorAccess() {
		return (pComparator != null) ? pComparator : (pComparator = new ComparatorElements());
	}
	
	public ParserRule getComparatorRule() {
		return getComparatorAccess().getRule();
	}

	//AddOperator:
	//	"+" | "-";
	public AddOperatorElements getAddOperatorAccess() {
		return (pAddOperator != null) ? pAddOperator : (pAddOperator = new AddOperatorElements());
	}
	
	public ParserRule getAddOperatorRule() {
		return getAddOperatorAccess().getRule();
	}

	//MultiOperator:
	//	"*" | "%" | "/";
	public MultiOperatorElements getMultiOperatorAccess() {
		return (pMultiOperator != null) ? pMultiOperator : (pMultiOperator = new MultiOperatorElements());
	}
	
	public ParserRule getMultiOperatorRule() {
		return getMultiOperatorAccess().getRule();
	}

	//Expression:
	//	leftOperand=Conjunction (operator="|" rightOperand=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Conjunction:
	//	leftOperand=Comparision (operator="&" rightOperand=Conjunction)?;
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparision:
	//	leftOperand=ValueExpression (operator=Comparator rightOperand=Comparision)?;
	public ComparisionElements getComparisionAccess() {
		return (pComparision != null) ? pComparision : (pComparision = new ComparisionElements());
	}
	
	public ParserRule getComparisionRule() {
		return getComparisionAccess().getRule();
	}

	//ValueExpression:
	//	leftOperand=Multiplication (operator=AddOperator rightOperand=ValueExpression)?;
	public ValueExpressionElements getValueExpressionAccess() {
		return (pValueExpression != null) ? pValueExpression : (pValueExpression = new ValueExpressionElements());
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//Multiplication:
	//	leftOperand=BasicExpression (operator=MultiOperator rightOperand=BasicExpression)?;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//BasicExpression:
	//	ParExpression | PrefixOperatorExpression | MethodInvocationExpression | QualifiedExpression | Name;
	public BasicExpressionElements getBasicExpressionAccess() {
		return (pBasicExpression != null) ? pBasicExpression : (pBasicExpression = new BasicExpressionElements());
	}
	
	public ParserRule getBasicExpressionRule() {
		return getBasicExpressionAccess().getRule();
	}

	//Name:
	//	Literal;
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//Literal:
	//	SimpleLiteral | StringLiteral | IntegerLiteral | NullLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//SimpleLiteral returns EString:
	//	value=ID;
	public SimpleLiteralElements getSimpleLiteralAccess() {
		return (pSimpleLiteral != null) ? pSimpleLiteral : (pSimpleLiteral = new SimpleLiteralElements());
	}
	
	public ParserRule getSimpleLiteralRule() {
		return getSimpleLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return (pIntegerLiteral != null) ? pIntegerLiteral : (pIntegerLiteral = new IntegerLiteralElements());
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//QualifiedExpression:
	//	value=QualifiedName;
	public QualifiedExpressionElements getQualifiedExpressionAccess() {
		return (pQualifiedExpression != null) ? pQualifiedExpression : (pQualifiedExpression = new QualifiedExpressionElements());
	}
	
	public ParserRule getQualifiedExpressionRule() {
		return getQualifiedExpressionAccess().getRule();
	}

	//NullLiteral:
	//	value=NullExpression;
	public NullLiteralElements getNullLiteralAccess() {
		return (pNullLiteral != null) ? pNullLiteral : (pNullLiteral = new NullLiteralElements());
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//NullExpression:
	//	"null";
	public NullExpressionElements getNullExpressionAccess() {
		return (pNullExpression != null) ? pNullExpression : (pNullExpression = new NullExpressionElements());
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}

	//PrefixOperatorExpression:
	//	operator=PrefixOperator operand=Expression;
	public PrefixOperatorExpressionElements getPrefixOperatorExpressionAccess() {
		return (pPrefixOperatorExpression != null) ? pPrefixOperatorExpression : (pPrefixOperatorExpression = new PrefixOperatorExpressionElements());
	}
	
	public ParserRule getPrefixOperatorExpressionRule() {
		return getPrefixOperatorExpressionAccess().getRule();
	}

	//MethodInvocationExpression:
	//	(receiver=[VariableDeclaration] ".")? method=MethodInvocation;
	public MethodInvocationExpressionElements getMethodInvocationExpressionAccess() {
		return (pMethodInvocationExpression != null) ? pMethodInvocationExpression : (pMethodInvocationExpression = new MethodInvocationExpressionElements());
	}
	
	public ParserRule getMethodInvocationExpressionRule() {
		return getMethodInvocationExpressionAccess().getRule();
	}

	//MethodInvocation:
	//	name=SimpleLiteral "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public MethodInvocationElements getMethodInvocationAccess() {
		return (pMethodInvocation != null) ? pMethodInvocation : (pMethodInvocation = new MethodInvocationElements());
	}
	
	public ParserRule getMethodInvocationRule() {
		return getMethodInvocationAccess().getRule();
	}

	//Statement:
	//	IfStatement | (LocalVariableDeclaration | TaskStatement | ReturnStatement) ";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//LocalVariableDeclaration:
	//	type=[Type] variables+=VariableDeclaration ("," variables+=VariableDeclaration)*;
	public LocalVariableDeclarationElements getLocalVariableDeclarationAccess() {
		return (pLocalVariableDeclaration != null) ? pLocalVariableDeclaration : (pLocalVariableDeclaration = new LocalVariableDeclarationElements());
	}
	
	public ParserRule getLocalVariableDeclarationRule() {
		return getLocalVariableDeclarationAccess().getRule();
	}

	//IfStatement:
	//	"if" condition=ParExpression thenBlok=Block ("else" elseBlock=ElseBlock)?;
	public IfStatementElements getIfStatementAccess() {
		return (pIfStatement != null) ? pIfStatement : (pIfStatement = new IfStatementElements());
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ElseBlock:
	//	Block | IfStatement;
	public ElseBlockElements getElseBlockAccess() {
		return (pElseBlock != null) ? pElseBlock : (pElseBlock = new ElseBlockElements());
	}
	
	public ParserRule getElseBlockRule() {
		return getElseBlockAccess().getRule();
	}

	//ReturnStatement:
	//	value="return";
	public ReturnStatementElements getReturnStatementAccess() {
		return (pReturnStatement != null) ? pReturnStatement : (pReturnStatement = new ReturnStatementElements());
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//TaskStatement:
	//	AssignmentStatement | MethodInvocationExpression;
	public TaskStatementElements getTaskStatementAccess() {
		return (pTaskStatement != null) ? pTaskStatement : (pTaskStatement = new TaskStatementElements());
	}
	
	public ParserRule getTaskStatementRule() {
		return getTaskStatementAccess().getRule();
	}

	//AssignmentStatement:
	//	variable=[VariableDeclaration] operator=AssignmentOperator value=Expression;
	public AssignmentStatementElements getAssignmentStatementAccess() {
		return (pAssignmentStatement != null) ? pAssignmentStatement : (pAssignmentStatement = new AssignmentStatementElements());
	}
	
	public ParserRule getAssignmentStatementRule() {
		return getAssignmentStatementAccess().getRule();
	}

	//ParExpression:
	//	"(" expression=Expression ")";
	public ParExpressionElements getParExpressionAccess() {
		return (pParExpression != null) ? pParExpression : (pParExpression = new ParExpressionElements());
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//// should varilable name be "name"?	
	//VariableDeclaration:
	//	name=ID;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//PrefixOperator:
	//	"!";
	public PrefixOperatorElements getPrefixOperatorAccess() {
		return (pPrefixOperator != null) ? pPrefixOperator : (pPrefixOperator = new PrefixOperatorElements());
	}
	
	public ParserRule getPrefixOperatorRule() {
		return getPrefixOperatorAccess().getRule();
	}

	//AssignmentOperator:
	//	"=";
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return (pAssignmentOperator != null) ? pAssignmentOperator : (pAssignmentOperator = new AssignmentOperatorElements());
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
