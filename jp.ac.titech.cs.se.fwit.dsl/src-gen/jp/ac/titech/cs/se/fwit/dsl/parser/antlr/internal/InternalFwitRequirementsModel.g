/*
* generated by Xtext
*/
grammar InternalFwitRequirementsModel;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package jp.ac.titech.cs.se.fwit.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package jp.ac.titech.cs.se.fwit.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import jp.ac.titech.cs.se.fwit.dsl.services.FwitRequirementsModelGrammarAccess;

}

@parser::members {

 	private FwitRequirementsModelGrammarAccess grammarAccess;
 	
    public InternalFwitRequirementsModelParser(TokenStream input, FwitRequirementsModelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FwitRequirementModel";	
   	}
   	
   	@Override
   	protected FwitRequirementsModelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFwitRequirementModel
entryRuleFwitRequirementModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFwitRequirementModelRule()); }
	 iv_ruleFwitRequirementModel=ruleFwitRequirementModel 
	 { $current=$iv_ruleFwitRequirementModel.current; } 
	 EOF 
;

// Rule FwitRequirementModel
ruleFwitRequirementModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFwitRequirementModelAccess().getSystemSystemDeclarationParserRuleCall_0_0()); 
	    }
		lv_system_0_0=ruleSystemDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFwitRequirementModelRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_0_0, 
        		"SystemDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFwitRequirementModelAccess().getElementsSystemElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleSystemElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFwitRequirementModelRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"SystemElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleSystemElement
entryRuleSystemElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemElementRule()); }
	 iv_ruleSystemElement=ruleSystemElement 
	 { $current=$iv_ruleSystemElement.current; } 
	 EOF 
;

// Rule SystemElement
ruleSystemElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSystemElementAccess().getIncludeParserRuleCall_0()); 
    }
    this_Include_0=ruleInclude
    { 
        $current = $this_Include_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSystemElementAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType
    { 
        $current = $this_Type_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSystemElementAccess().getModuleParserRuleCall_2()); 
    }
    this_Module_2=ruleModule
    { 
        $current = $this_Module_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInclude
entryRuleInclude returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIncludeRule()); }
	 iv_ruleInclude=ruleInclude 
	 { $current=$iv_ruleInclude.current; } 
	 EOF 
;

// Rule Include
ruleInclude returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIncludeAccess().getIncludeKeyword_0());
    }
(
(
		lv_file_1_0=RULE_STRING
		{
			newLeafNode(lv_file_1_0, grammarAccess.getIncludeAccess().getFileSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIncludeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"file",
        		lv_file_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='mapped-to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getMappedToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getClassNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_className_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleSystemDeclaration
entryRuleSystemDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemDeclarationRule()); }
	 iv_ruleSystemDeclaration=ruleSystemDeclaration 
	 { $current=$iv_ruleSystemDeclaration.current; } 
	 EOF 
;

// Rule SystemDeclaration
ruleSystemDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='system' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSystemDeclarationAccess().getSystemKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSystemDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSystemDeclarationAccess().getExtendsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSystemDeclarationAccess().getFrameworkQualifiedExpressionParserRuleCall_3_0()); 
	    }
		lv_framework_3_0=ruleQualifiedExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSystemDeclarationRule());
	        }
       		set(
       			$current, 
       			"framework",
        		lv_framework_3_0, 
        		"QualifiedExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSystemDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getFieldsFieldDeclarationParserRuleCall_3_0()); 
	    }
		lv_fields_3_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_3_0, 
        		"FieldDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getFunctionsFunctionDeclarationParserRuleCall_4_0()); 
	    }
		lv_functions_4_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"functions",
        		lv_functions_4_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); }
	 iv_ruleFieldDeclaration=ruleFieldDeclaration 
	 { $current=$iv_ruleFieldDeclaration.current; } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldDeclarationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldDeclarationAccess().getTypeTypeCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='}' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
    }
)
;





// Entry rule entryRuleComparator
entryRuleComparator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparatorRule()); } 
	 iv_ruleComparator=ruleComparator 
	 { $current=$iv_ruleComparator.current.getText(); }  
	 EOF 
;

// Rule Comparator
ruleComparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparatorAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparatorAccess().getLessThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparatorAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparatorAccess().getLessThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleAddOperator
entryRuleAddOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAddOperatorRule()); } 
	 iv_ruleAddOperator=ruleAddOperator 
	 { $current=$iv_ruleAddOperator.current.getText(); }  
	 EOF 
;

// Rule AddOperator
ruleAddOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAddOperatorAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleMultiOperator
entryRuleMultiOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiOperatorRule()); } 
	 iv_ruleMultiOperator=ruleMultiOperator 
	 { $current=$iv_ruleMultiOperator.current.getText(); }  
	 EOF 
;

// Rule MultiOperator
ruleMultiOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiOperatorAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiOperatorAccess().getPercentSignKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMultiOperatorAccess().getSolidusKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getLeftOperandConjunctionParserRuleCall_0_0()); 
	    }
		lv_leftOperand_0_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_operator_1_0=	'|' 
    {
        newLeafNode(lv_operator_1_0, grammarAccess.getExpressionAccess().getOperatorVerticalLineKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_0, "|");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getRightOperandExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current; } 
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getLeftOperandComparisionParserRuleCall_0_0()); 
	    }
		lv_leftOperand_0_0=ruleComparision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_0, 
        		"Comparision");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_operator_1_0=	'&' 
    {
        newLeafNode(lv_operator_1_0, grammarAccess.getConjunctionAccess().getOperatorAmpersandKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConjunctionRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_1_0, "&");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getRightOperandConjunctionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_2_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_2_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleComparision
entryRuleComparision returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisionRule()); }
	 iv_ruleComparision=ruleComparision 
	 { $current=$iv_ruleComparision.current; } 
	 EOF 
;

// Rule Comparision
ruleComparision returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisionAccess().getLeftOperandValueExpressionParserRuleCall_0_0()); 
	    }
		lv_leftOperand_0_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisionRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getComparisionAccess().getOperatorComparatorParserRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleComparator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"Comparator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisionAccess().getRightOperandComparisionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_2_0=ruleComparision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_2_0, 
        		"Comparision");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getLeftOperandMultiplicationParserRuleCall_0_0()); 
	    }
		lv_leftOperand_0_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getOperatorAddOperatorParserRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleAddOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"AddOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getRightOperandValueExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getLeftOperandBasicExpressionParserRuleCall_0_0()); 
	    }
		lv_leftOperand_0_0=ruleBasicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_0, 
        		"BasicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getOperatorMultiOperatorParserRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleMultiOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"MultiOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightOperandBasicExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_2_0=ruleBasicExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_2_0, 
        		"BasicExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBasicExpression
entryRuleBasicExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBasicExpressionRule()); }
	 iv_ruleBasicExpression=ruleBasicExpression 
	 { $current=$iv_ruleBasicExpression.current; } 
	 EOF 
;

// Rule BasicExpression
ruleBasicExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getParExpressionParserRuleCall_0()); 
    }
    this_ParExpression_0=ruleParExpression
    { 
        $current = $this_ParExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getPrefixOperatorExpressionParserRuleCall_1()); 
    }
    this_PrefixOperatorExpression_1=rulePrefixOperatorExpression
    { 
        $current = $this_PrefixOperatorExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getMethodInvocationExpressionParserRuleCall_2()); 
    }
    this_MethodInvocationExpression_2=ruleMethodInvocationExpression
    { 
        $current = $this_MethodInvocationExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getQualifiedExpressionParserRuleCall_3()); 
    }
    this_QualifiedExpression_3=ruleQualifiedExpression
    { 
        $current = $this_QualifiedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBasicExpressionAccess().getNameParserRuleCall_4()); 
    }
    this_Name_4=ruleName
    { 
        $current = $this_Name_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleName
entryRuleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getNameAccess().getLiteralParserRuleCall()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getSimpleLiteralParserRuleCall_0()); 
    }
    this_SimpleLiteral_0=ruleSimpleLiteral
    { 
        $current = $this_SimpleLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); 
    }
    this_StringLiteral_1=ruleStringLiteral
    { 
        $current = $this_StringLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getIntegerLiteralParserRuleCall_2()); 
    }
    this_IntegerLiteral_2=ruleIntegerLiteral
    { 
        $current = $this_IntegerLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
    }
    this_NullLiteral_3=ruleNullLiteral
    { 
        $current = $this_NullLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleLiteral
entryRuleSimpleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleLiteralRule()); }
	 iv_ruleSimpleLiteral=ruleSimpleLiteral 
	 { $current=$iv_ruleSimpleLiteral.current; } 
	 EOF 
;

// Rule SimpleLiteral
ruleSimpleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_ID
		{
			newLeafNode(lv_value_0_0, grammarAccess.getSimpleLiteralAccess().getValueIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	 iv_ruleStringLiteral=ruleStringLiteral 
	 { $current=$iv_ruleStringLiteral.current; } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); }
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current; } 
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getIntegerLiteralAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleQualifiedExpression
entryRuleQualifiedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedExpressionRule()); }
	 iv_ruleQualifiedExpression=ruleQualifiedExpression 
	 { $current=$iv_ruleQualifiedExpression.current; } 
	 EOF 
;

// Rule QualifiedExpression
ruleQualifiedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedExpressionAccess().getValueQualifiedNameParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNullLiteral
entryRuleNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullLiteralRule()); }
	 iv_ruleNullLiteral=ruleNullLiteral 
	 { $current=$iv_ruleNullLiteral.current; } 
	 EOF 
;

// Rule NullLiteral
ruleNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNullLiteralAccess().getValueNullExpressionParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNullExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNullLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NullExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNullExpression
entryRuleNullExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNullExpressionRule()); } 
	 iv_ruleNullExpression=ruleNullExpression 
	 { $current=$iv_ruleNullExpression.current.getText(); }  
	 EOF 
;

// Rule NullExpression
ruleNullExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='null' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNullExpressionAccess().getNullKeyword()); 
    }

    ;





// Entry rule entryRulePrefixOperatorExpression
entryRulePrefixOperatorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixOperatorExpressionRule()); }
	 iv_rulePrefixOperatorExpression=rulePrefixOperatorExpression 
	 { $current=$iv_rulePrefixOperatorExpression.current; } 
	 EOF 
;

// Rule PrefixOperatorExpression
rulePrefixOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixOperatorExpressionAccess().getOperatorPrefixOperatorParserRuleCall_0_0()); 
	    }
		lv_operator_0_0=rulePrefixOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"PrefixOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixOperatorExpressionAccess().getOperandExpressionParserRuleCall_1_0()); 
	    }
		lv_operand_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethodInvocationExpression
entryRuleMethodInvocationExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodInvocationExpressionRule()); }
	 iv_ruleMethodInvocationExpression=ruleMethodInvocationExpression 
	 { $current=$iv_ruleMethodInvocationExpression.current; } 
	 EOF 
;

// Rule MethodInvocationExpression
ruleMethodInvocationExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodInvocationExpressionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getMethodInvocationExpressionAccess().getReceiverVariableDeclarationCrossReference_0_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodInvocationExpressionAccess().getFullStopKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationExpressionAccess().getMethodMethodInvocationParserRuleCall_1_0()); 
	    }
		lv_method_2_0=ruleMethodInvocation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationExpressionRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_2_0, 
        		"MethodInvocation");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMethodInvocation
entryRuleMethodInvocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodInvocationRule()); }
	 iv_ruleMethodInvocation=ruleMethodInvocation 
	 { $current=$iv_ruleMethodInvocation.current; } 
	 EOF 
;

// Rule MethodInvocation
ruleMethodInvocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getNameSimpleLiteralParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleSimpleLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"SimpleLiteral");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodInvocationAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getArgumentsExpressionParserRuleCall_2_0_0()); 
	    }
		lv_arguments_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodInvocationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodInvocationAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_arguments_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodInvocationRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodInvocationAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0()); 
    }
    this_IfStatement_0=ruleIfStatement
    { 
        $current = $this_IfStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLocalVariableDeclarationParserRuleCall_1_0_0()); 
    }
    this_LocalVariableDeclaration_1=ruleLocalVariableDeclaration
    { 
        $current = $this_LocalVariableDeclaration_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTaskStatementParserRuleCall_1_0_1()); 
    }
    this_TaskStatement_2=ruleTaskStatement
    { 
        $current = $this_TaskStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_1_0_2()); 
    }
    this_ReturnStatement_3=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_3.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getSemicolonKeyword_1_1());
    }
))
;





// Entry rule entryRuleLocalVariableDeclaration
entryRuleLocalVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocalVariableDeclarationRule()); }
	 iv_ruleLocalVariableDeclaration=ruleLocalVariableDeclaration 
	 { $current=$iv_ruleLocalVariableDeclaration.current; } 
	 EOF 
;

// Rule LocalVariableDeclaration
ruleLocalVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLocalVariableDeclarationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getLocalVariableDeclarationAccess().getTypeTypeCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_1_0()); 
	    }
		lv_variables_1_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_1_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLocalVariableDeclarationAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocalVariableDeclarationAccess().getVariablesVariableDeclarationParserRuleCall_2_1_0()); 
	    }
		lv_variables_3_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocalVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_3_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getConditionParExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleParExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"ParExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getThenBlokBlockParserRuleCall_2_0()); 
	    }
		lv_thenBlok_2_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"thenBlok",
        		lv_thenBlok_2_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='else' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getElseKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockElseBlockParserRuleCall_3_1_0()); 
	    }
		lv_elseBlock_4_0=ruleElseBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseBlock",
        		lv_elseBlock_4_0, 
        		"ElseBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleElseBlock
entryRuleElseBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElseBlockRule()); }
	 iv_ruleElseBlock=ruleElseBlock 
	 { $current=$iv_ruleElseBlock.current; } 
	 EOF 
;

// Rule ElseBlock
ruleElseBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElseBlockAccess().getBlockParserRuleCall_0()); 
    }
    this_Block_0=ruleBlock
    { 
        $current = $this_Block_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElseBlockAccess().getIfStatementParserRuleCall_1()); 
    }
    this_IfStatement_1=ruleIfStatement
    { 
        $current = $this_IfStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=	'return' 
    {
        newLeafNode(lv_value_0_0, grammarAccess.getReturnStatementAccess().getValueReturnKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnStatementRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_0, "return");
	    }

)
)
;





// Entry rule entryRuleTaskStatement
entryRuleTaskStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskStatementRule()); }
	 iv_ruleTaskStatement=ruleTaskStatement 
	 { $current=$iv_ruleTaskStatement.current; } 
	 EOF 
;

// Rule TaskStatement
ruleTaskStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTaskStatementAccess().getAssignmentStatementParserRuleCall_0()); 
    }
    this_AssignmentStatement_0=ruleAssignmentStatement
    { 
        $current = $this_AssignmentStatement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTaskStatementAccess().getMethodInvocationExpressionParserRuleCall_1()); 
    }
    this_MethodInvocationExpression_1=ruleMethodInvocationExpression
    { 
        $current = $this_MethodInvocationExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	 iv_ruleAssignmentStatement=ruleAssignmentStatement 
	 { $current=$iv_ruleAssignmentStatement.current; } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAssignmentStatementAccess().getVariableVariableDeclarationCrossReference_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getOperatorAssignmentOperatorParserRuleCall_1_0()); 
	    }
		lv_operator_1_0=ruleAssignmentOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"AssignmentOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParExpression
entryRuleParExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParExpressionRule()); }
	 iv_ruleParExpression=ruleParExpression 
	 { $current=$iv_ruleParExpression.current; } 
	 EOF 
;

// Rule ParExpression
ruleParExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParExpressionAccess().getExpressionExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRulePrefixOperator
entryRulePrefixOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixOperatorRule()); } 
	 iv_rulePrefixOperator=rulePrefixOperator 
	 { $current=$iv_rulePrefixOperator.current.getText(); }  
	 EOF 
;

// Rule PrefixOperator
rulePrefixOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixOperatorAccess().getExclamationMarkKeyword()); 
    }

    ;





// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); } 
	 iv_ruleAssignmentOperator=ruleAssignmentOperator 
	 { $current=$iv_ruleAssignmentOperator.current.getText(); }  
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


